@page "/"
@inject NavigationManager _navigationManager
@implements IAsyncDisposable

<PageTitle>USB-Detector</PageTitle>

<h1>USB Detector</h1>

<ul>
    <li>
        <span>Usb Hub is: <strong>@(Connected ? "Connected" : "Disconnected")</strong></span>        
    </li>
    <li>
        @if (string.IsNullOrEmpty(_serialNumber))
        {
            <span>Usb unplugged</span>
        }
        else
        {
            <span>Usb plugged: <strong>@_serialNumber</strong></span>
        }
    </li>
</ul>

@code
{
    private HubConnection? _hubConnection;
    private string? _serialNumber;

    protected override async Task OnInitializedAsync()
    {
        await StartHubConnection();
    }

    private async Task StartHubConnection()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("http://localhost:5000/usbhub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>("Connect", serialNumber =>
        {
            _serialNumber = serialNumber;
            StateHasChanged();
        });
        
        await _hubConnection.StartAsync();
        
        if (Connected) Console.WriteLine("connection started");
    }

    private bool Connected => _hubConnection?.State == HubConnectionState.Connected;
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null) await _hubConnection.DisposeAsync();
    }
}
